{"meta":{"title":"wonderful的自由空间","subtitle":"机遇总是留给有准备之人","description":"好的机遇总是留给有准备之人","author":"xiexin","url":"https://wonderfulxin.github.io"},"pages":[],"posts":[{"title":"压缩图片单例Util","slug":"ZipUtil","date":"2016-12-23T03:35:00.000Z","updated":"2016-12-23T07:35:52.538Z","comments":true,"path":"2016/12/23/ZipUtil/","link":"","permalink":"https://wonderfulxin.github.io/2016/12/23/ZipUtil/","excerpt":"摘要:压缩图片的工具类，内存经常由于图片占用空间大而内存溢出，有了这个压缩最起码会好好多。","text":"摘要:压缩图片的工具类，内存经常由于图片占用空间大而内存溢出，有了这个压缩最起码会好好多。public class ZipUtil {private static ZipUtil instance;private ZipUtil() {}public static synchronized ZipUtil getInstance() {if (instance == null) { instance = new ZipUtil();} return instance;}private File compressImage(Bitmap image) { ByteArrayOutputStream baos = new ByteArrayOutputStream(); image.compress(Bitmap.CompressFormat.JPEG, 100, baos);//质量压缩方法，这里100表示 不压缩，把压缩后的数据存放到baos中 int options = 100; while ( baos.toByteArray().length / 1024&gt;200) { //循环判断如果压缩后图片是否大于200kb,大于继续压缩 baos.reset();//重置baos即清空baos image.compress(Bitmap.CompressFormat.JPEG, options, baos);//这里压缩options%，把压缩后的数据存放到baos中 options -= 10;//每次都减少10 }// ByteArrayInputStream isBm = new ByteArrayInputStream(baos.toByteArray());//把压缩后的数据baos存放到ByteArrayInputStream中// Bitmap bitmap = BitmapFactory.decodeStream(isBm, null, null);//把ByteArrayInputStream数据生成图片 new DateFormat(); String name = DateFormat.format(“yyyyMMdd_hhmmss”,Calendar.getInstance(Locale.CHINA)) + “.JPEG”; File f = new File( “/sdcard/Image/“+name); try { FileOutputStream fos = new FileOutputStream(f); fos.write(baos.toByteArray()); fos.flush(); fos.close(); } catch (Exception e) { e.printStackTrace(); } return f; }public File getimage(String srcPath) { BitmapFactory.Options newOpts = new BitmapFactory.Options(); //开始读入图片，此时把options.inJustDecodeBounds 设回true了 newOpts.inJustDecodeBounds = true; Bitmap bitmap = BitmapFactory.decodeFile(srcPath,newOpts);//此时返回bm为空 newOpts.inJustDecodeBounds = false; int w = newOpts.outWidth; int h = newOpts.outHeight; //现在主流手机比较多是800*480分辨率，所以高和宽我们设置为 float hh = 800f;//这里设置高度为800f float ww = 480f;//这里设置宽度为480f //缩放比。由于是固定比例缩放，只用高或者宽其中一个数据进行计算即可 int be = 1;//be=1表示不缩放 if (w &gt; h &amp;&amp; w &gt; ww) {//如果宽度大的话根据宽度固定大小缩放 be = (int) (newOpts.outWidth / ww); } else if (w &lt; h &amp;&amp; h &gt; hh) {//如果高度高的话根据宽度固定大小缩放 be = (int) (newOpts.outHeight / hh); } if (be &lt;= 0) be = 1; newOpts.inSampleSize = be;//设置缩放比例 //重新读入图片，注意此时已经把options.inJustDecodeBounds 设回false了 bitmap = BitmapFactory.decodeFile(srcPath, newOpts); return compressImage(bitmap);//压缩好比例大小后再进行质量压缩 }}","categories":[],"tags":[]},{"title":"我的第一篇博客","slug":"hello-world","date":"2016-12-21T08:41:57.131Z","updated":"2016-12-23T03:04:57.194Z","comments":true,"path":"2016/12/21/hello-world/","link":"","permalink":"https://wonderfulxin.github.io/2016/12/21/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy 摘要: 正文:我的第一篇","categories":[],"tags":[{"name":"android","slug":"android","permalink":"https://wonderfulxin.github.io/tags/android/"}]},{"title":"我的第二篇博客","slug":"hello","date":"2015-07-01T14:37:23.000Z","updated":"2016-12-23T03:05:47.227Z","comments":true,"path":"2015/07/01/hello/","link":"","permalink":"https://wonderfulxin.github.io/2015/07/01/hello/","excerpt":"摘要:安卓面试经验","text":"摘要:安卓面试经验正文:我的第一篇","categories":[{"name":"日志","slug":"日志","permalink":"https://wonderfulxin.github.io/categories/日志/"}],"tags":[{"name":"js","slug":"js","permalink":"https://wonderfulxin.github.io/tags/js/"}]}]}